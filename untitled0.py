# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r3CRCtrbNopDryqIQxX5h5EKQ-I5luaI
"""

import pickle
import numpy as np
import matplotlib.pyplot as plt
import random as rnd

def unpickle(file):
    with open(file, 'rb') as f:
        dict = pickle.load(f, encoding="latin1")
    return dict

datadict = unpickle('/content/sample_data/data_batch_1')
X = datadict["data"] #nd-data
Y = datadict["labels"] #10000 labels
#labeldict = unpickle('C:/Users/hamed/anaconda3/envs/dataml100/cifar-10-python/cifar-10-batches-py/batches.meta')
#label_names = labeldict["label_names"]
X = X.reshape(10000, 3, 32, 32).transpose(0,2,3,1).astype("uint8")
Y = np.array(Y)
t_datadic = unpickle('/content/sample_data/test_batch')
Xte = datadict["data"] #nd-data
Xte = Xte.reshape(10000, 3, 32, 32).transpose(0,2,3,1).astype("uint8")
Yte = datadict["labels"] #10000 labels

def class_acc(pred,gt):
    subtract = pred - gt
    zero_elements = np.count_nonzero(subtract == 0)
    accuracy = zero_elements / len(subtract)
    return accuracy

def cifar10_classiﬁer_random(X):
    random_numbers = [rnd.randint(1,10) for i in range (0, len(X))]
    random_numbers = np.array(random_numbers)
    t = class_acc(random_numbers,Yte)
    return t

def cifar10_classiﬁer_1nn(Xte,Yte):
  pred = list()
  minimum = 0
  index = 0
  for i in Xte:
        for j in X:
            distance = np.linalg.norm(Xte-X)
        if minimum > distance:
            minimum = distance
            index = j
        pred.append(Y[index])
  pred = np.array(pred)
  tt = class_acc(pred,Yte)
  return tt

a = cifar10_classiﬁer_random(X)
print(f' the accuracy of random model is {a*100}')
b = cifar10_classiﬁer_1nn(Xte,Yte)
print(f' the accuracy of 1-NN is {b*100}')