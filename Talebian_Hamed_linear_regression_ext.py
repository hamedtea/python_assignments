# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yxyXFzomGyF2RV_rgpWbjCRzuCawlxwW
"""

from google.colab import drive
drive.mount('/content/gdrive')
import numpy as np

X_train = np.loadtxt("/content/gdrive/MyDrive/Colab Notebooks/Datasets/cifar-10-batches-py/X_train.dat")
y_train = np.loadtxt("/content/gdrive/MyDrive/Colab Notebooks/Datasets/cifar-10-batches-py/y_train.dat")
X_test = np.loadtxt("/content/gdrive/MyDrive/Colab Notebooks/Datasets/cifar-10-batches-py/X_test.dat")
y_test = np.loadtxt("/content/gdrive/MyDrive/Colab Notebooks/Datasets/cifar-10-batches-py/y_test.dat")

print(X_train[...,3])

baseline = 1 / len(X_train) * np.sum(np.power(X_train,13), axis = 0)
MSE = np.sum(np.power((baseline-X_train),2))

print('reading data... Done!')
print('baseline accuracy (MAE)', MSE)

def my_linefit(x,y): 
    
    """a function that calculate the gradient coefficient of one space linear regression problem
        param: x:list, y:list
        return: a:int, b:int 
    """
    x_bar = x.sum() / len(x) #normalized mean
    y_bar = y.sum() / len(y) #normalized mean
    xy = x*y 
    xy_bar = xy.sum() / len(x) * len(y) #normalized cross variance
    x_two = x*x 
    x_square_bar = x_two.sum() / len(x)*len(x) #normalized covariance

    a = (x_bar*y_bar - xy_bar) / ((x_bar*x_bar) - x_square_bar) #slope
    b = y_bar - (x_bar)*((x_bar*y_bar - xy_bar) / ((x_bar)*(x_bar) - x_square_bar)) #intercept
    return a , b

print('reading data... Done!')
print('Shape of training data', X_train.shape)
for i in range(1,13):
  a, b = my_linefit(X_train[:,i], y_train)
  y_fit = a*X_test[:,i] + b
  MAE = np.sum(abs(y_test - y_fit)) / len(y_fit)
  print('Lin. reg. dim,', i, 'accuracy:', MAE)

MAE_arr = np.zeros(13,)
print('reading data... Done!')
print('Shape of training data', X_train.shape)
for i in range(1,13):
  a, b = my_linefit(X_train[:,i], y_train)
  y_fit = a*X_test[:,i] + b
  MAE_arr[i,] = np.sum(abs(y_test - y_fit)) / len(y_fit)
MAE_avg = np.mean(MAE_arr)
first_best = np.where(MAE_arr == MAE_arr.max())
MAE_best = np.zeros(2,)
MAE_best_1 = MAE_avg.max()
ind = np.where(MAE_arr == MAE_avg.max())
MAE_arr = np.delete(MAE_arr, ind)
MAE_best_2 = MAE_avg.max()
print('Combining average of 1-dim regressors', MAE_avg)
print('Combining average of 1-dim regressors', (MAE_best_1 + MAE_best_2)/2)

MAE = np.zeros(13,)
print(MAE.max())